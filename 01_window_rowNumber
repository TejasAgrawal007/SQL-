-- ðŸ”¹ Q1. Assign a row number to each employee based on their salary (highest first).
-- ðŸ“Œ Explanation: This gives a unique number to each employee based on salary, highest first.


select * 
from employees;

select 
	id,
    first_name,
    salary,
    row_number() over(order by salary) as row_num
from employees;


-- Q2. Assign a row number to each employee ordered by hire date (oldest first).
-- ðŸ“Œ Explanation: Useful to see who joined the company first.


select 
	id,
    first_name,
    department, 
    salary,
    row_number() over(order by hire_date) as row_num
from employees;


-- ðŸ”¹ Q3. Assign a row number within each department based on salary.
-- ðŸ“Œ Explanation: Numbers are reset for each department and ordered by highest salary.

select
	id,
    first_name,
    department,
    salary,
    row_number() over(partition by department order by salary) as row_num
from employees;


-- ðŸ”¹ Q4. Show all employees along with their row number, ordered alphabetically by name.
-- ðŸ“Œ Explanation: Good for understanding alphabetical ordering using ROW_NUMBER().

select
	id,
    first_name,
    row_number() over(order by first_name asc) as row_num
from employees;

-- ðŸ”¹ Q5. Add row numbers to the employee list without any ordering (just to practice syntax).
-- ðŸ“Œ Explanation: Not recommended in real use (no ORDER BY), but shows how syntax works.

select
	id,
    first_name,
    row_number() over() as row_num
from employees;


-- ðŸ’ª Tougher SQL ROW_NUMBER() Questions (with Answers & Explanations)

-- Q1. Find the highest-paid employee in each department whose 
-- salary is greater than the departmentâ€™s average.

-- ðŸ“Œ Explanation: Combines ROW_NUMBER() and AVG() in the same query. 
-- Filters top 1 salary per department, but only if above average.


with ranked as (
	select *, 
		row_number() over (partition by department order by salary desc) as rn,
		avg(salary) over (partition by department) as avg_salary
	from employees
)


select id, first_name, department, salary
from ranked
where rn = 1 and salary > avg_salary;


-- ðŸ”¹ Q2. Get the latest hired employee for each department.
-- ðŸ“Œ Explanation: ROW_NUMBER() sorts by latest hire_date per department to pick the most recent hire.

with Ranked as 
(
		select *,
			row_number() over(partition by department order by hire_date desc) as rn
        from employees
)

select *
from Ranked
where rn = 1;


-- Q3. Remove duplicate employee names, keeping only the one with the highest salary (assume names can repeat).
-- ðŸ“Œ Explanation: Handles deduplication by keeping the highest-paid version of each name.

with result as (
	select *,
		row_number() over(partition by first_name order by salary desc) as rn
		from employees
)

select *
from result
where rn = 1;



-- ðŸ”¹ Q4. Get top 2 employees per department by salary.
-- ðŸ“Œ Explanation: Classic top-N per group query using ROW_NUMBER().

with result as (
select *,
	row_number() over(partition by department order by salary desc) as rn
    from employees
)
select id, first_name, department, salary
from result
where rn <= 2;


